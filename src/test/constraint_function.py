def max_one_bump_on_decreasing_sequence(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_one_decreasing(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = max(r,max(max(d,delta),deltaprime))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_one_decreasing_sequence(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,deltaprime)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_one_decreasing_terrace(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_one_dip_on_increasing_sequence(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_one_gorge(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_one_increasing(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = max(r,max(max(d,delta),deltaprime))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_one_increasing_sequence(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,deltaprime)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_one_increasing_terrace(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_one_inflexion(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_one_peak(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_one_plain(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_one_plateau(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_one_proper_plain(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_one_proper_plateau(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_one_steady(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = max(r,max(max(d,delta),deltaprime))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_one_steady_sequence(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_one_strictly_decreasing_sequence(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_one_strictly_increasing_sequence(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_one_summit(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_one_valley(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_one_zigzag(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'a':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'b':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
            elif  current_state == 'c':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'd':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'f':
                if symbol == '>':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
        previous_number = number
    return max(r,c)

def max_one_zigzag2(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'g'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'f':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'd':
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '=':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'a':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'b':
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'c':
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'l':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'k':
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'j':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'k'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'g':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'h':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'i'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'i':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_width_bump_on_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_width_decreasing(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta+deltaprime)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_width_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+deltaprime
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_width_decreasing_terrace(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_width_dip_on_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_width_gorge(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_width_increasing(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta+deltaprime)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_width_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+deltaprime
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_width_increasing_terrace(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_width_inflexion(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_width_peak(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_width_plain(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_width_plateau(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_width_proper_plain(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_width_proper_plateau(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_width_steady(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta+deltaprime)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_width_steady_sequence(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_width_strictly_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_width_strictly_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_width_summit(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_width_valley(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_width_zigzag(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'a':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'b':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
            elif  current_state == 'c':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'd':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'f':
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
        previous_number = number
    return max(r,c)

def max_width_zigzag2(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'g'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'f':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'd':
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'a':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'b':
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'c':
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'l':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'k':
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'j':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'k'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'g':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'h':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'i'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'i':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_surface_bump_on_decreasing_sequence(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_surface_decreasing(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta+deltaprime)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_surface_decreasing_sequence(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+deltaprime
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = float('-inf')
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_surface_decreasing_terrace(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_surface_dip_on_increasing_sequence(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_surface_gorge(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = float('-inf')
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_surface_increasing(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta+deltaprime)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_surface_increasing_sequence(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = float('-inf')
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+deltaprime
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_surface_increasing_terrace(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_surface_inflexion(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_surface_peak(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = float('-inf')
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_surface_plain(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_surface_plateau(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_surface_proper_plain(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_surface_proper_plateau(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_surface_steady(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = max(r,d+delta+deltaprime)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_surface_steady_sequence(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_surface_strictly_decreasing_sequence(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = float('-inf')
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_surface_strictly_increasing_sequence(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = float('-inf')
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_surface_summit(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = float('-inf')
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_surface_valley(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = float('-inf')
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_surface_zigzag(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'a':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'b':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
            elif  current_state == 'c':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = float('-inf')
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'd':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'f':
                if symbol == '>':
                    c_tmp = float('-inf')
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
        previous_number = number
    return max(r,c)

def max_surface_zigzag2(sequence):
    n = len(sequence)
    c=float('-inf')
    d=0
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'g'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'f':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = float('-inf')
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'd':
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'a':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'b':
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'c':
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'l':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'k':
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = float('-inf')
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'j':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'k'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = 0
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'g':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'h':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'i'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'i':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_max_bump_on_decreasing_sequence(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_max_decreasing(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = max(r,max(max(d,delta),deltaprime))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_max_decreasing_sequence(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,deltaprime)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = float('-inf')
                    d_tmp = float('-inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_max_decreasing_terrace(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_max_dip_on_increasing_sequence(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_max_gorge(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = float('-inf')
                    d_tmp = float('-inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_max_increasing(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = max(r,max(max(d,delta),deltaprime))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_max_increasing_sequence(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = float('-inf')
                    d_tmp = float('-inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,deltaprime)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_max_increasing_terrace(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_max_inflexion(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_max_peak(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = float('-inf')
                    d_tmp = float('-inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_max_plain(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_max_plateau(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_max_proper_plain(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_max_proper_plateau(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = max(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_max_steady(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = max(r,max(max(d,delta),deltaprime))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_max_steady_sequence(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = float('-inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_max_strictly_decreasing_sequence(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = float('-inf')
                    d_tmp = float('-inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = float('-inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_max_strictly_increasing_sequence(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = float('-inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = float('-inf')
                    d_tmp = float('-inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_max_summit(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = float('-inf')
                    d_tmp = float('-inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_max_valley(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = float('-inf')
                    d_tmp = float('-inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_max_zigzag(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'a':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'b':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
            elif  current_state == 'c':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = float('-inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = float('-inf')
                    d_tmp = float('-inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'd':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'f':
                if symbol == '>':
                    c_tmp = float('-inf')
                    d_tmp = float('-inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = float('-inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
        previous_number = number
    return max(r,c)

def max_max_zigzag2(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('-inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'g'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'f':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = float('-inf')
                    d_tmp = float('-inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = float('-inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'd':
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = float('-inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'a':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'b':
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'c':
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'l':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'k':
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = float('-inf')
                    d_tmp = float('-inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = float('-inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'j':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'k'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = float('-inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'g':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'h':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'i'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'i':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_min_bump_on_decreasing_sequence(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = max(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_min_decreasing(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = max(r,min(min(d,delta),deltaprime))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_min_decreasing_sequence(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = min(min(d,delta),deltaprime)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = min(c,min(d,deltaprime))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,deltaprime)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = float('-inf')
                    d_tmp = float('inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_min_decreasing_terrace(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = max(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_min_dip_on_increasing_sequence(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = max(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_min_gorge(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = float('-inf')
                    d_tmp = float('inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_min_increasing(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = max(r,min(min(d,delta),deltaprime))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_min_increasing_sequence(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = min(min(d,delta),deltaprime)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = float('-inf')
                    d_tmp = float('inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,deltaprime)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = min(c,min(d,deltaprime))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_min_increasing_terrace(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = max(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_min_inflexion(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = max(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = max(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_min_peak(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = float('-inf')
                    d_tmp = float('inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_min_plain(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = max(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = max(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_min_plateau(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = max(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = max(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_min_proper_plain(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = max(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_min_proper_plateau(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = max(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_min_steady(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = max(r,min(min(d,delta),deltaprime))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_min_steady_sequence(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = min(min(d,delta),deltaprime)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = float('inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = min(c,min(d,deltaprime))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_min_strictly_decreasing_sequence(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = min(min(d,delta),deltaprime)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = min(c,min(d,deltaprime))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = float('-inf')
                    d_tmp = float('inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = float('inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_min_strictly_increasing_sequence(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = min(min(d,delta),deltaprime)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = float('inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = float('-inf')
                    d_tmp = float('inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = min(c,min(d,deltaprime))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_min_summit(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = float('-inf')
                    d_tmp = float('inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_min_valley(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = float('-inf')
                    d_tmp = float('inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_min_zigzag(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'a':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'b':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
            elif  current_state == 'c':
                if symbol == '>':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = float('inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = float('-inf')
                    d_tmp = float('inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'd':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'f':
                if symbol == '>':
                    c_tmp = float('-inf')
                    d_tmp = float('inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = float('inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
        previous_number = number
    return max(r,c)

def max_min_zigzag2(sequence):
    n = len(sequence)
    c=float('-inf')
    d=float('inf')
    r=float('-inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'g'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'f':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = float('-inf')
                    d_tmp = float('inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = float('inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'd':
                if symbol == '<':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
                if symbol == '>':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = float('inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'a':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'b':
                if symbol == '<':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'c':
                if symbol == '<':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'l':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'k':
                if symbol == '<':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = float('-inf')
                    d_tmp = float('inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = float('inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'j':
                if symbol == '>':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'k'
                if symbol == '<':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = float('-inf')
                    d_tmp = float('inf')
                    r_tmp = max(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'g':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'h':
                if symbol == '>':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'i'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'i':
                if symbol == '>':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_range_bump_on_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = max(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_range_decreasing(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = max(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_range_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = max(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_range_decreasing_terrace(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = max(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_range_dip_on_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = max(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_range_gorge(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = max(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_range_increasing(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = max(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_range_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = max(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_range_increasing_terrace(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = max(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_range_inflexion(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = max(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = max(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_range_peak(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = max(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_range_plain(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = max(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = max(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_range_plateau(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = max(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = max(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_range_proper_plain(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = max(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_range_proper_plateau(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = max(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_range_steady(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = max(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_range_steady_sequence(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = max(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_range_strictly_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = max(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = max(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_range_strictly_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = max(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = max(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return max(r,c)

def max_range_summit(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = max(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def max_range_valley(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = max(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return max(r,c)

def max_range_zigzag(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'a':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'b':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'c'
            elif  current_state == 'c':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = max(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = max(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'd':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'e'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'f':
                if symbol == '>':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = max(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = max(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'c'
        previous_number = number
    return max(r,c)

def max_range_zigzag2(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'a'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'g'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'f':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = max(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = max(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'd':
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'e'
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '=':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = max(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'a':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'b':
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'c'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'c':
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'l':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'k':
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = max(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = max(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'j':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'k'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = max(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'g':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'h':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'i'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'i':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return max(r,c)

def min_one_bump_on_decreasing_sequence(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_one_decreasing(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = min(r,max(max(d,delta),deltaprime))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_one_decreasing_sequence(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,deltaprime)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_one_decreasing_terrace(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_one_dip_on_increasing_sequence(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_one_gorge(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_one_increasing(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = min(r,max(max(d,delta),deltaprime))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_one_increasing_sequence(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,deltaprime)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_one_increasing_terrace(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_one_inflexion(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_one_peak(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_one_plain(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_one_plateau(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_one_proper_plain(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_one_proper_plateau(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_one_steady(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = min(r,max(max(d,delta),deltaprime))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_one_steady_sequence(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_one_strictly_decreasing_sequence(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_one_strictly_increasing_sequence(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_one_summit(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_one_valley(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_one_zigzag(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'a':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'b':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
            elif  current_state == 'c':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'd':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'f':
                if symbol == '>':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
        previous_number = number
    return min(r,c)

def min_one_zigzag2(sequence):
    n = len(sequence)
    c=1
    d=1
    r=1
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'g'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'f':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'd':
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '=':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'a':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'b':
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'c':
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'l':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'k':
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'j':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'k'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = 1
                    d_tmp = 1
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'g':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'h':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'i'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'i':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_width_bump_on_decreasing_sequence(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_width_decreasing(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta+deltaprime)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_width_decreasing_sequence(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+deltaprime
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = n
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_width_decreasing_terrace(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_width_dip_on_increasing_sequence(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_width_gorge(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = n
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_width_increasing(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta+deltaprime)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_width_increasing_sequence(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = n
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+deltaprime
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_width_increasing_terrace(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_width_inflexion(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_width_peak(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = n
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_width_plain(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_width_plateau(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_width_proper_plain(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_width_proper_plateau(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_width_steady(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta+deltaprime)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_width_steady_sequence(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = n
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_width_strictly_decreasing_sequence(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = n
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = n
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_width_strictly_increasing_sequence(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = n
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = n
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_width_summit(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = n
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_width_valley(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = n
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_width_zigzag(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'a':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'b':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
            elif  current_state == 'c':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = n
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = n
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'd':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'f':
                if symbol == '>':
                    c_tmp = n
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = n
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
        previous_number = number
    return min(r,c)

def min_width_zigzag2(sequence):
    n = len(sequence)
    c=n
    d=0
    r=n
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'g'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'f':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = n
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = n
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'd':
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '=':
                    c_tmp = n
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'a':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'b':
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'c':
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'l':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'k':
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = n
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = n
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'j':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'k'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = n
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'g':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'h':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'i'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'i':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_surface_bump_on_decreasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_surface_decreasing(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta+deltaprime)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_surface_decreasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+deltaprime
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = float('inf')
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_surface_decreasing_terrace(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_surface_dip_on_increasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_surface_gorge(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = float('inf')
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_surface_increasing(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta+deltaprime)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_surface_increasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = float('inf')
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+deltaprime
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_surface_increasing_terrace(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_surface_inflexion(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_surface_peak(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = float('inf')
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_surface_plain(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_surface_plateau(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_surface_proper_plain(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_surface_proper_plateau(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_surface_steady(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = min(r,d+delta+deltaprime)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_surface_steady_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_surface_strictly_decreasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = float('inf')
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_surface_strictly_increasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = float('inf')
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_surface_summit(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = float('inf')
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_surface_valley(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = float('inf')
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_surface_zigzag(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'a':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'b':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
            elif  current_state == 'c':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = float('inf')
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'd':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'f':
                if symbol == '>':
                    c_tmp = float('inf')
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
        previous_number = number
    return min(r,c)

def min_surface_zigzag2(sequence):
    n = len(sequence)
    c=float('inf')
    d=0
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'g'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'f':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = float('inf')
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'd':
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'a':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'b':
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'c':
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'l':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'k':
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = float('inf')
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'j':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'k'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = 0
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'g':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'h':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'i'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'i':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_max_bump_on_decreasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_max_decreasing(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = min(r,max(max(d,delta),deltaprime))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_max_decreasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,deltaprime)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = float('inf')
                    d_tmp = float('-inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_max_decreasing_terrace(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_max_dip_on_increasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_max_gorge(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = float('inf')
                    d_tmp = float('-inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_max_increasing(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = min(r,max(max(d,delta),deltaprime))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_max_increasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = float('inf')
                    d_tmp = float('-inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,deltaprime)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_max_increasing_terrace(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_max_inflexion(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_max_peak(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = float('inf')
                    d_tmp = float('-inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_max_plain(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_max_plateau(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_max_proper_plain(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_max_proper_plateau(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = min(r,max(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_max_steady(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = min(r,max(max(d,delta),deltaprime))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_max_steady_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = float('-inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_max_strictly_decreasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = float('inf')
                    d_tmp = float('-inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = float('-inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_max_strictly_increasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = float('-inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = float('inf')
                    d_tmp = float('-inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_max_summit(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = float('inf')
                    d_tmp = float('-inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_max_valley(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = float('inf')
                    d_tmp = float('-inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_max_zigzag(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'a':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'b':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
            elif  current_state == 'c':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = float('-inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = float('inf')
                    d_tmp = float('-inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'd':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'f':
                if symbol == '>':
                    c_tmp = float('inf')
                    d_tmp = float('-inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = float('-inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
        previous_number = number
    return min(r,c)

def min_max_zigzag2(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('-inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'g'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'f':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = float('inf')
                    d_tmp = float('-inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = float('-inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'd':
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = float('-inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'a':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'b':
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'c':
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'l':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'k':
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = float('inf')
                    d_tmp = float('-inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = float('-inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'j':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'k'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = float('-inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'g':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'h':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'i'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'i':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_min_bump_on_decreasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = min(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_min_decreasing(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = min(r,min(min(d,delta),deltaprime))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_min_decreasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = min(min(d,delta),deltaprime)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = min(c,min(d,deltaprime))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,deltaprime)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = float('inf')
                    d_tmp = float('inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_min_decreasing_terrace(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = min(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_min_dip_on_increasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = min(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_min_gorge(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = float('inf')
                    d_tmp = float('inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_min_increasing(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = min(r,min(min(d,delta),deltaprime))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_min_increasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = min(min(d,delta),deltaprime)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = float('inf')
                    d_tmp = float('inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,deltaprime)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = min(c,min(d,deltaprime))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_min_increasing_terrace(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = min(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_min_inflexion(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = min(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = min(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_min_peak(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = float('inf')
                    d_tmp = float('inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_min_plain(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = min(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = min(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_min_plateau(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = min(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = min(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_min_proper_plain(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = min(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_min_proper_plateau(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = min(r,min(d,delta))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_min_steady(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = min(r,min(min(d,delta),deltaprime))
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_min_steady_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = min(min(d,delta),deltaprime)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = float('inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = min(c,min(d,deltaprime))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_min_strictly_decreasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = min(min(d,delta),deltaprime)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = min(c,min(d,deltaprime))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = float('inf')
                    d_tmp = float('inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = float('inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_min_strictly_increasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = min(min(d,delta),deltaprime)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = float('inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = float('inf')
                    d_tmp = float('inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = min(c,min(d,deltaprime))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_min_summit(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = float('inf')
                    d_tmp = float('inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_min_valley(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = float('inf')
                    d_tmp = float('inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_min_zigzag(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'a':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'b':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
            elif  current_state == 'c':
                if symbol == '>':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = float('inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = float('inf')
                    d_tmp = float('inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'd':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'f':
                if symbol == '>':
                    c_tmp = float('inf')
                    d_tmp = float('inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = float('inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
        previous_number = number
    return min(r,c)

def min_min_zigzag2(sequence):
    n = len(sequence)
    c=float('inf')
    d=float('inf')
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'g'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'f':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = float('inf')
                    d_tmp = float('inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = float('inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'd':
                if symbol == '<':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
                if symbol == '>':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = float('inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'a':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'b':
                if symbol == '<':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'c':
                if symbol == '<':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'l':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'k':
                if symbol == '<':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = float('inf')
                    d_tmp = float('inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = float('inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'j':
                if symbol == '>':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'k'
                if symbol == '<':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = float('inf')
                    d_tmp = float('inf')
                    r_tmp = min(r,c)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'g':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'h':
                if symbol == '>':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'i'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'i':
                if symbol == '>':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_range_bump_on_decreasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = min(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_range_decreasing(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = min(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_range_decreasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = float('inf')
                    h_tmp = deltaprime
                    r_tmp = min(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_range_decreasing_terrace(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = min(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_range_dip_on_increasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = min(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_range_gorge(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = float('inf')
                    h_tmp = deltaprime
                    r_tmp = min(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_range_increasing(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = min(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_range_increasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = float('inf')
                    h_tmp = deltaprime
                    r_tmp = min(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_range_increasing_terrace(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = min(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_range_inflexion(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = min(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = min(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_range_peak(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = float('inf')
                    h_tmp = deltaprime
                    r_tmp = min(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_range_plain(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = min(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = min(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_range_plateau(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = min(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = min(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_range_proper_plain(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = min(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_range_proper_plateau(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = min(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_range_steady(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = min(r,abs(h-deltaprime))
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_range_steady_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = float('inf')
                    h_tmp = deltaprime
                    r_tmp = min(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_range_strictly_decreasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = float('inf')
                    h_tmp = deltaprime
                    r_tmp = min(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = float('inf')
                    h_tmp = deltaprime
                    r_tmp = min(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_range_strictly_increasing_sequence(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = float('inf')
                    h_tmp = deltaprime
                    r_tmp = min(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = float('inf')
                    h_tmp = deltaprime
                    r_tmp = min(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return min(r,c)

def min_range_summit(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = float('inf')
                    h_tmp = deltaprime
                    r_tmp = min(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def min_range_valley(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = float('inf')
                    h_tmp = deltaprime
                    r_tmp = min(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return min(r,c)

def min_range_zigzag(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'a':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'b':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'c'
            elif  current_state == 'c':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = float('inf')
                    h_tmp = deltaprime
                    r_tmp = min(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = float('inf')
                    h_tmp = deltaprime
                    r_tmp = min(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'd':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'e'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'f':
                if symbol == '>':
                    c_tmp = float('inf')
                    h_tmp = deltaprime
                    r_tmp = min(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = float('inf')
                    h_tmp = deltaprime
                    r_tmp = min(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'c'
        previous_number = number
    return min(r,c)

def min_range_zigzag2(sequence):
    n = len(sequence)
    c=float('inf')
    h=sequence[0]
    r=float('inf')
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'a'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'g'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'f':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = float('inf')
                    h_tmp = deltaprime
                    r_tmp = min(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = float('inf')
                    h_tmp = deltaprime
                    r_tmp = min(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'd':
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'e'
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '=':
                    c_tmp = float('inf')
                    h_tmp = deltaprime
                    r_tmp = min(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'a':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'b':
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'c'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'c':
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'l':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'k':
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = float('inf')
                    h_tmp = deltaprime
                    r_tmp = min(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = float('inf')
                    h_tmp = deltaprime
                    r_tmp = min(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'j':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'k'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = float('inf')
                    h_tmp = deltaprime
                    r_tmp = min(r,c)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'g':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'h':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'i'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'i':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return min(r,c)

def sum_one_bump_on_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_one_decreasing(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r+max(max(d,delta),deltaprime)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_one_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,deltaprime)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 1
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_one_decreasing_terrace(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_one_dip_on_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_one_gorge(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 1
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_one_increasing(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r+max(max(d,delta),deltaprime)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_one_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 1
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,deltaprime)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_one_increasing_terrace(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_one_inflexion(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_one_peak(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 1
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_one_plain(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_one_plateau(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_one_proper_plain(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_one_proper_plateau(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_one_steady(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r+max(max(d,delta),deltaprime)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_one_steady_sequence(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 1
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_one_strictly_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 1
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 1
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_one_strictly_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 1
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 1
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_one_summit(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 1
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_one_valley(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 1
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_one_zigzag(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'a':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'b':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
            elif  current_state == 'c':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 1
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 1
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'd':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'f':
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 1
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 1
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
        previous_number = number
    return r+c

def sum_one_zigzag2(sequence):
    n = len(sequence)
    c=0
    d=1
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'g'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'f':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 1
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 1
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'd':
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 1
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'a':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'b':
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'c':
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'l':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'k':
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 1
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 1
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'j':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'k'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 1
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'g':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'h':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'i'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'i':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 1
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_width_bump_on_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_width_decreasing(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta+deltaprime
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_width_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+deltaprime
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_width_decreasing_terrace(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_width_dip_on_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_width_gorge(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_width_increasing(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta+deltaprime
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_width_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+deltaprime
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_width_increasing_terrace(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_width_inflexion(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_width_peak(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_width_plain(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_width_plateau(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_width_proper_plain(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_width_proper_plateau(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_width_steady(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta+deltaprime
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_width_steady_sequence(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_width_strictly_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_width_strictly_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_width_summit(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_width_valley(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_width_zigzag(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'a':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'b':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
            elif  current_state == 'c':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'd':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'f':
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
        previous_number = number
    return r+c

def sum_width_zigzag2(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'g'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'f':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'd':
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'a':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'b':
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'c':
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'l':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'k':
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'j':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'k'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'g':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'h':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'i'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'i':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_surface_bump_on_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_surface_decreasing(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta+deltaprime
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_surface_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+deltaprime
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_surface_decreasing_terrace(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_surface_dip_on_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_surface_gorge(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_surface_increasing(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta+deltaprime
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_surface_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+deltaprime
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_surface_increasing_terrace(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_surface_inflexion(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_surface_peak(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_surface_plain(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_surface_plateau(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_surface_proper_plain(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_surface_proper_plateau(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_surface_steady(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r+d+delta+deltaprime
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_surface_steady_sequence(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_surface_strictly_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_surface_strictly_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = d+delta+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c+d+deltaprime
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_surface_summit(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_surface_valley(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_surface_zigzag(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'a':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'b':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
            elif  current_state == 'c':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'd':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'f':
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
        previous_number = number
    return r+c

def sum_surface_zigzag2(sequence):
    n = len(sequence)
    c=0
    d=0
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'g'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'f':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'd':
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'a':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'b':
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'c':
                if symbol == '<':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'l':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'k':
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'j':
                if symbol == '>':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'k'
                if symbol == '<':
                    c_tmp = c+d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = 0
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'g':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'h':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d+delta
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'i'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'i':
                if symbol == '>':
                    c_tmp = d+delta
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = 0
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_max_bump_on_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_max_decreasing(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r+max(max(d,delta),deltaprime)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_max_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,deltaprime)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = float('-inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_max_decreasing_terrace(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_max_dip_on_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_max_gorge(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = float('-inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_max_increasing(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r+max(max(d,delta),deltaprime)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_max_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = float('-inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,deltaprime)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_max_increasing_terrace(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_max_inflexion(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_max_peak(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = float('-inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_max_plain(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_max_plateau(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_max_proper_plain(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_max_proper_plateau(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r+max(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_max_steady(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r+max(max(d,delta),deltaprime)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_max_steady_sequence(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = float('-inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_max_strictly_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = float('-inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = float('-inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_max_strictly_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(max(d,delta),deltaprime)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = float('-inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = float('-inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(c,max(d,deltaprime))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_max_summit(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = float('-inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_max_valley(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = float('-inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_max_zigzag(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'a':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'b':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
            elif  current_state == 'c':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = float('-inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = float('-inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'd':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'f':
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = float('-inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = float('-inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
        previous_number = number
    return r+c

def sum_max_zigzag2(sequence):
    n = len(sequence)
    c=0
    d=float('-inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'g'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'f':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = float('-inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = float('-inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'd':
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = float('-inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'a':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'b':
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'c':
                if symbol == '<':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'l':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'k':
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = float('-inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = float('-inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'j':
                if symbol == '>':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'k'
                if symbol == '<':
                    c_tmp = max(c,max(d,delta))
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = float('-inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'g':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'h':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = max(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'i'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'i':
                if symbol == '>':
                    c_tmp = max(d,delta)
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('-inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_min_bump_on_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r+min(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_min_decreasing(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r+min(min(d,delta),deltaprime)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_min_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = min(min(d,delta),deltaprime)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = min(c,min(d,deltaprime))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,deltaprime)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = float('inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_min_decreasing_terrace(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r+min(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_min_dip_on_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r+min(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_min_gorge(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = float('inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_min_increasing(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r+min(min(d,delta),deltaprime)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_min_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = min(min(d,delta),deltaprime)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = float('inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,deltaprime)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = min(c,min(d,deltaprime))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_min_increasing_terrace(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r+min(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_min_inflexion(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r+min(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r+min(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_min_peak(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = float('inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_min_plain(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r+min(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r+min(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_min_plateau(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r+min(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r+min(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_min_proper_plain(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r+min(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_min_proper_plateau(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r+min(d,delta)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_min_steady(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r+min(min(d,delta),deltaprime)
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_min_steady_sequence(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = min(min(d,delta),deltaprime)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = float('inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = min(c,min(d,deltaprime))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_min_strictly_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = min(min(d,delta),deltaprime)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = min(c,min(d,deltaprime))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = float('inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = float('inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_min_strictly_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = min(min(d,delta),deltaprime)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = float('inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = float('inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = min(c,min(d,deltaprime))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_min_summit(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = float('inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_min_valley(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = float('inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_min_zigzag(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'a':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'b':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
            elif  current_state == 'c':
                if symbol == '>':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = float('inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = float('inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'd':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'f':
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = float('inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = float('inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
        previous_number = number
    return r+c

def sum_min_zigzag2(sequence):
    n = len(sequence)
    c=0
    d=float('inf')
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'a'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'g'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'f':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = 0
                    d_tmp = float('inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = float('inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'd':
                if symbol == '<':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'e'
                if symbol == '>':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = float('inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'a':
                if symbol == '<':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'b':
                if symbol == '<':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'c'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'c':
                if symbol == '<':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'l':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'k':
                if symbol == '<':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = 0
                    d_tmp = float('inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = float('inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'j':
                if symbol == '>':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'k'
                if symbol == '<':
                    c_tmp = min(c,min(d,delta))
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = 0
                    d_tmp = float('inf')
                    r_tmp = r+c
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'g':
                if symbol == '>':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = d
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'h':
                if symbol == '>':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = min(d,delta)
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'i'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'i':
                if symbol == '>':
                    c_tmp = min(d,delta)
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    d_tmp = float('inf')
                    r_tmp = r
                    c = c_tmp
                    d = d_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_range_bump_on_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r+abs(h-deltaprime)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_range_decreasing(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r+abs(h-deltaprime)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_range_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = r+c
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_range_decreasing_terrace(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r+abs(h-deltaprime)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_range_dip_on_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'v'
            elif  current_state == 'v':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r+abs(h-deltaprime)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_range_gorge(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = r+c
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_range_increasing(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r+abs(h-deltaprime)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_range_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = r+c
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_range_increasing_terrace(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r+abs(h-deltaprime)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_range_inflexion(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r+abs(h-deltaprime)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r+abs(h-deltaprime)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_range_peak(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = r+c
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_range_plain(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r+abs(h-deltaprime)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r+abs(h-deltaprime)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_range_plateau(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r+abs(h-deltaprime)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r+abs(h-deltaprime)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_range_proper_plain(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r+abs(h-deltaprime)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_range_proper_plateau(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r+abs(h-deltaprime)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_range_steady(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r+abs(h-deltaprime)
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_range_steady_sequence(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = r+c
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_range_strictly_decreasing_sequence(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = r+c
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = r+c
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_range_strictly_increasing_sequence(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = r+c
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = r+c
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
        previous_number = number
    return r+c

def sum_range_summit(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'r':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'u'
            elif  current_state == 't':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = r+c
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
            elif  current_state == 'u':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'u'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

def sum_range_valley(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'r':
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
            elif  current_state == 't':
                if symbol == '>':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = r+c
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'r'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 't'
        previous_number = number
    return r+c

def sum_range_zigzag(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'a':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'b':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'c'
            elif  current_state == 'c':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = r+c
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = r+c
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'd':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'e'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'a'
            elif  current_state == 'f':
                if symbol == '>':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = r+c
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = r+c
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'c'
        previous_number = number
    return r+c

def sum_range_zigzag2(sequence):
    n = len(sequence)
    c=0
    h=sequence[0]
    r=0
    for i, number in enumerate(sequence):
        if 'previous_number' in locals():
            if previous_number > number:
                symbol = '>'
            elif previous_number < number:
                symbol = '<'
            else:
                symbol = '='
            delta = sequence[i-1]
            deltaprime = sequence[i]
            if 'current_state' not in locals() or  current_state == 's':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'a'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'g'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'f':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'e':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = r+c
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = r+c
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'd':
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'e'
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '=':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = r+c
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'a':
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'b'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'b':
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'c'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'c':
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'l':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'k':
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '>':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = r+c
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '=':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = r+c
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'j':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'k'
                if symbol == '<':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'd'
                if symbol == '=':
                    c_tmp = 0
                    h_tmp = deltaprime
                    r_tmp = r+c
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'g':
                if symbol == '>':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'l'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'h'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'h':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'i'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
            elif  current_state == 'i':
                if symbol == '>':
                    c_tmp = abs(h-deltaprime)
                    h_tmp = h
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'j'
                if symbol == '<':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 'f'
                if symbol == '=':
                    c_tmp = c
                    h_tmp = deltaprime
                    r_tmp = r
                    c = c_tmp
                    h = h_tmp
                    r = r_tmp
                    current_state = 's'
        previous_number = number
    return r+c

